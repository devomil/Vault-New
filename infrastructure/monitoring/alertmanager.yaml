apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: vault-platform
  labels:
    app: alertmanager
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        component: monitoring
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        ports:
        - containerPort: 9093
          name: http
        args:
        - --config.file=/etc/alertmanager/alertmanager.yml
        - --storage.path=/alertmanager
        - --web.external-url=http://alertmanager:9093
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        - name: alertmanager-storage
          mountPath: /alertmanager
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        persistentVolumeClaim:
          claimName: alertmanager-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: vault-platform
  labels:
    app: alertmanager
    component: monitoring
spec:
  ports:
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: http
  selector:
    app: alertmanager
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-pvc
  namespace: vault-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: vault-platform
data:
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
      slack_api_url: 'https://hooks.slack.com/services/YOUR_SLACK_WEBHOOK'
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alertmanager@vault-platform.com'
      smtp_auth_username: 'alertmanager@vault-platform.com'
      smtp_auth_password: 'your-smtp-password'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'slack-notifications'
      routes:
      - match:
          severity: critical
        receiver: 'pager-duty-critical'
        continue: true
      - match:
          severity: warning
        receiver: 'slack-notifications'
        continue: true
      - match:
          job: vault-api-gateway
        receiver: 'api-team'
        continue: true
      - match:
          job: vault-order-processing
        receiver: 'order-team'
        continue: true
      - match:
          job: vault-security-compliance
        receiver: 'security-team'
        continue: true

    receivers:
    - name: 'slack-notifications'
      slack_configs:
      - channel: '#vault-alerts'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true

    - name: 'pager-duty-critical'
      pagerduty_configs:
      - service_key: 'your-pagerduty-service-key'
        send_resolved: true

    - name: 'api-team'
      slack_configs:
      - channel: '#api-team'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true

    - name: 'order-team'
      slack_configs:
      - channel: '#order-team'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true

    - name: 'security-team'
      slack_configs:
      - channel: '#security-team'
        title: '{{ template "slack.title" . }}'
        text: '{{ template "slack.text" . }}'
        send_resolved: true

    templates:
    - '/etc/alertmanager/template/*.tmpl'

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'dev', 'instance'] 